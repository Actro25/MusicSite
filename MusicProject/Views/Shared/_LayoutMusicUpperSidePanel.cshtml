@{
    Layout = "_LayoutMusicHome";
}
@section Styles
{
    <link rel="stylesheet" href="~/css/upperPanelStyle.css" asp-append-version="true"/>
}
<header>
    <div class="search-input">
        <input id="search" type="text" placeholder="Search for songs, artists, or albums..."/>
        <ul id="suggestions" class="hidden"></ul>
        <svg xmlns="http://www.w3.org/2000/svg" class="search-icon" viewBox="0 0 24 24" fill="none">
            <path d="M21 21l-4.35-4.35m1.85-5.15a7 7 0 11-14 0 7 7 0 0114 0z"
                  stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
        </svg>
    </div>
</header>

<script>
    const input = document.getElementById('search');
    const list = document.getElementById('suggestions');

    const spotifySearch = ['SpotifyMusic1','SpotifyMusic2','SpotifyMusic3','SpotifyMusic4'];
    const soundCloudSearch = ['SoundCloudMusic1','SoundCloudMusic2','SoundCloudMusic3'];
    const options = [...spotifySearch,...soundCloudSearch];

    const SPOTIFY_CLIENT_ID = '';
    const SPOTIFY_CLIENT_SECRET = '';

    let spotifyToken = null;
    let tokenExpiryTime = null;

    // Функція для отримання токена
    async function getSpotifyAccessToken() {
        const credentials = btoa(`${SPOTIFY_CLIENT_ID}:${SPOTIFY_CLIENT_SECRET}`);

        const response = await fetch('https://accounts.spotify.com/api/token', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Authorization': `Basic ${credentials}`
            },
            body: 'grant_type=client_credentials'
        });

        const data = await response.json();
        return data.access_token;
    }

    async function getValidToken() {
        // Перевіряємо чи токен ще дійсний (залишилось ще 5 хвилин)
        if (spotifyToken && Date.now() < tokenExpiryTime - 300000) {
            return spotifyToken;
        }

        // Отримуємо новий токен
        spotifyToken = await getSpotifyAccessToken();
        tokenExpiryTime = Date.now() + 3600000; // 1 година
        console.log('Отримано новий токен Spotify');
        return spotifyToken;
    }

    async function searchTracks(searchQuery, accessToken) {
        try {
            const encodedQuery = encodeURIComponent(searchQuery);

            const response = await fetch(`https://api.spotify.com/v1/search?q=${encodedQuery}&type=track&limit=10`, {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + accessToken
                }
            });

            if (!response.ok) {
                throw new Error(`Помилка пошуку: ${response.status}`);
            }

            const data = await response.json();
            return data.tracks.items; // Масив знайдених треків
        } catch (error) {
            console.error('Помилка при пошуку треків:', error);
            return [];
        }
    }

    // Функція для відображення результатів Spotify
    function displaySpotifyResults(tracks, icon) {
        tracks.forEach(track => {
            const li = document.createElement('li');

            if (icon) {
                const img = document.createElement('img');
                img.src = icon;
                img.height = 20;
                img.width = 20;
                img.style.verticalAlign = 'middle';
                img.style.marginRight = '8px';
                li.appendChild(img);
            }

            // Форматуємо назву треку та виконавця
            const trackInfo = `${track.name} - ${track.artists.map(artist => artist.name).join(', ')}`;
            const text = document.createTextNode(trackInfo);
            li.appendChild(text);

            li.onclick = () => {
                input.value = `spotify:${track.name}`;
                list.classList.add('hidden');
            };

            list.appendChild(li);
        });

        list.classList.toggle('hidden', tracks.length === 0);
    }

    // Функція для відображення звичайних результатів
    function displayRegularResults(filtered, icon) {
        filtered.forEach(opt => {
            const li = document.createElement('li');

            if (icon) {
                const img = document.createElement('img');
                img.src = icon;
                img.height = 20;
                img.width = 20;
                img.style.verticalAlign = 'middle';
                img.style.marginRight = '8px';
                li.appendChild(img);
            }

            const text = document.createTextNode(opt);
            li.appendChild(text);

            li.onclick = () => {
                input.value = opt;
                list.classList.add('hidden');
            };

            list.appendChild(li);
        });

        list.classList.toggle('hidden', filtered.length === 0);
    }

    // Робимо обробник події асинхронним
    input.addEventListener('input', async () => {
        const value = input.value.toLowerCase();
        list.innerHTML = '';

        if (!value) {
            list.classList.add('hidden');
            return;
        }

        let refImg = '';
        let searchValue = value;
        let hasPrefix = false;

        if (value.startsWith('spotify:')) {
            refImg = '/img/spotify-logo-png.png';
            searchValue = value.replace('spotify:', '').trim();
            hasPrefix = true;

            if (searchValue) {
                try {
                    // Отримуємо токен і шукаємо треки
                    const token = await getValidToken();
                    const tracks = await searchTracks(searchValue, token);

                    // Відображаємо результати Spotify
                    displaySpotifyResults(tracks, refImg);
                    return; // Важливо: виходимо з функції після обробки Spotify
                } catch (error) {
                    console.error('Помилка Spotify API:', error);
                    // У разі помилки показуємо порожній список
                    list.classList.add('hidden');
                    return;
                }
            }
        }
        else if (value.startsWith('soundcloud:')) {
            refImg = '/img/soundcloud-logo-png.png';
            searchValue = value.replace('soundcloud:', '').trim();
            hasPrefix = true;

            const filtered = soundCloudSearch.filter(opt =>
                opt.toLowerCase().includes(searchValue)
            );
            displayRegularResults(filtered, refImg);
        }
        else {
            const filtered = options.filter(opt =>
                opt.toLowerCase().includes(value)
            );
            displayRegularResults(filtered, '');
        }
    });
</script>